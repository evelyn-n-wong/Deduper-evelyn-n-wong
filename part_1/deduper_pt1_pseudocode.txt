Title: Deduper Pseudocode
Author: Evelyn Wong
Date Created: 2023-10-05
Problem Description: Part 1 Pseudocode for Deduper

A PCR duplicate are reads made from the same original cDNA molecule via PCR. 
Because certain sequences can be over-represented through amplification, we want to ensure that our transcripts are significant rather than because of PCR bias.
 
Given SAM file, remove all PCR duplicates and retain single copy.

Don't load everything into memory.

Algorithm is for single-end data with 96 known UMIs.
UMI information will be in the QNAME, like so: NS500451:154:HWKTMBGXX:1:11101:15364:1139:GAACAGGT. Discard any UMIs with errors.

For de-duplicating, need to consider the chromosome position, beginning position, strandedness, soft-clipping presence, and UMIs. 
---------------------------------------------------

Create function to pass in user-specified files
def get_args():
    '''Function gets arguments from user and other options to be parsed and stores them into some defined variable'''
    - get SAM file 
    - get umi file 
    - get output path file
    - (challenge): paired end consideration
    return args

initialize args variables
umi_dictionary
new_dictionary_for_sam_file: keys as tuple of chromosome, strandedness, and position, and value as read
at bottom, initialize variables individually from SAM file

def known_umi(UMI sequence: str, UMI_dict) -> boolean:
'''this function removes unknown UMIs that are not part of the 96 known UMIs given'''
- compare current umi sequence against dict of known UMIs (MI file would be keys of dictionary)
- return lines that have known UMIs to new .sam file
input: some UMI sequence known
output: TRUE
input: some unknown UMI sequence
output: FALSE


def soft_clip(cigar_string:str):
'''This function determines whether soft-clipping is present and returns and adjusted alignment start position'''
- define variable for position at top
- grab cigar string to see if there is soft-clipping at the ends (5' and 3')
- if 'S' for soft clipping at position
    - correct start position to the 5' end of the read (subtract from position; position-current clip value)
- else
    - no soft clipping on 5' end, keep value
- return new adjusted position 
input: 13, '1S64M2S' 
output: 12 

def stranded(flag) # paired could be optional for challenge
'''This function checks bitwise flag and sees what the strand of the read is'''
- set strand as positive 
- check bitwise flag with logical boolean (16) if flag && 16 == 16
- if true, update flag as reverse complemented 
return strand 
input: 16
output: reverse
input: 0 
output: forward

main function
open up sam file 
open up umi file and store into dictionary
split SAM file into different columns
- RNAME (chromosome col 3)
- POSITION (col 4)
- STRAND (col 2)
- QNAME (col 1)
- CIGAR (col 6) for softclipping 
- BITFLAG

Call known_umi function and check that we have only known umi's
- if not known (FALSE), discard read
- if known (TRUE), retain read as VALUE of another dictionary. Keys should be a tuple of (POS, CHROM, STRAND). Similar to demultiplex (gene, protein, gene name).

Call soft_clip function for correct position

Only want correct position once so check to see in dictionary if only appears once 
- could also check strandedness at this point 
- If current position is in dictionary, check if CHROM and STRAND is there too
    - If TRUE, it's a duplicate, disregard
    - ELSE: not a duplicate, retain (add to the tuple in dictionary)
- Else: current position not in dictionary (not a duplicate)
    - add to dictionary

EOF: write values of new dictionary to new SAM file 



